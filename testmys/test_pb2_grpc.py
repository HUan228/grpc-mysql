# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import test_pb2 as test__pb2


class UserStorageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryUserInfo = channel.unary_unary(
                '/grpc_mysql.UserStorage/QueryUserInfo',
                request_serializer=test__pb2.CommonRequest.SerializeToString,
                response_deserializer=test__pb2.QueryReply.FromString,
                )
        self.InsertUser = channel.unary_unary(
                '/grpc_mysql.UserStorage/InsertUser',
                request_serializer=test__pb2.CommonRequest.SerializeToString,
                response_deserializer=test__pb2.CommonReply.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/grpc_mysql.UserStorage/DeleteUser',
                request_serializer=test__pb2.CommonRequest.SerializeToString,
                response_deserializer=test__pb2.CommonReply.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/grpc_mysql.UserStorage/UpdateUser',
                request_serializer=test__pb2.CommonRequest.SerializeToString,
                response_deserializer=test__pb2.CommonReply.FromString,
                )


class UserStorageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryUserInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserStorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryUserInfo,
                    request_deserializer=test__pb2.CommonRequest.FromString,
                    response_serializer=test__pb2.QueryReply.SerializeToString,
            ),
            'InsertUser': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertUser,
                    request_deserializer=test__pb2.CommonRequest.FromString,
                    response_serializer=test__pb2.CommonReply.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=test__pb2.CommonRequest.FromString,
                    response_serializer=test__pb2.CommonReply.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=test__pb2.CommonRequest.FromString,
                    response_serializer=test__pb2.CommonReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_mysql.UserStorage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserStorage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_mysql.UserStorage/QueryUserInfo',
            test__pb2.CommonRequest.SerializeToString,
            test__pb2.QueryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_mysql.UserStorage/InsertUser',
            test__pb2.CommonRequest.SerializeToString,
            test__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_mysql.UserStorage/DeleteUser',
            test__pb2.CommonRequest.SerializeToString,
            test__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_mysql.UserStorage/UpdateUser',
            test__pb2.CommonRequest.SerializeToString,
            test__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
